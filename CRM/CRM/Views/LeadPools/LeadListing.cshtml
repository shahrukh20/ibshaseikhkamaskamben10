@model CustomerManagementSystem.BLL.ViewModels.LeadPoolUserType

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="/Content/js/plugins/jquery/jquery-3.3.1.js"></script>

<h2></h2>

<form id="LeadListingForm" action="/LeadPools/LeadListing" method="post">
    <h1>Lead Listing</h1>
    <div id="content">

        <div class="box box-danger">
            <div class="box-header with-border">

                <div class="box-title">
                    @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @class = "form-control", @style = "display:none" } })
                </div>

                <div id="content">
                    <div class="addbutton right">
                        @if (ViewBag.UserType.ToString() == "3")
                        {
                            <a href="@Url.Action("LeadAddition", "LeadPools")"> <input type="button" class="btn btn-danger" value="Add Lead" /></a>
                        }

                    </div>
                    <div class="form-horizontal">
                        <div id="jsGrid"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

<!-- END MAIN CONTENT -->

<script type="text/javascript">



    $(document).ready(function () {
        var MyDateField = function (config) {
            jsGrid.Field.call(this, config);
        };

        MyDateField.prototype = new jsGrid.Field({

            css: "date-field",            // redefine general property 'css'
            align: "center",              // redefine general property 'align'

            myCustomProperty: "foo",      // custom property

            sorter: function (date1, date2) {
                return new Date(date1) - new Date(date2);
            },

            itemTemplate: function (value) {

                return new Date(value).toDateString();
            },

            filterTemplate: function (value) {
                return this._insertPicker = $("<input>").datepicker({ defaultDate: new Date() });
            },

            insertTemplate: function (value) {
                if (this.inserting)
                    return this._insertPicker = $("<input>").datepicker({ defaultDate: new Date() });
            },

            editTemplate: function (value) {
                if (this.inserting)
                    return this._editPicker = $("<input>").datepicker().datepicker("setDate", new Date(value));
            },

            insertValue: function () {
                if (this.inserting)
                    return this._insertPicker.datepicker("getDate").toISOString();
            },

            editValue: function () {
                if (this.inserting)
                    return this._editPicker.datepicker("getDate").toISOString();

            }
        });

        jsGrid.fields.date = MyDateField;

        //Float Value
        function DecimalField(config) {
            jsGrid.fields.number.call(this, config);
        }

        DecimalField.prototype = new jsGrid.fields.number({

            filterValue: function () {
                return this.filterControl.val()
                    ? parseFloat(this.filterControl.val() || 0, 10)
                    : undefined;
            },

            insertValue: function () {
                return this.insertControl.val()
                    ? parseFloat(this.insertControl.val() || 0, 10)
                    : undefined;
            },

            editValue: function () {
                return this.editControl.val()
                    ? parseFloat(this.editControl.val() || 0, 10)
                    : undefined;
            }
        });

        jsGrid.fields.decimal = jsGrid.DecimalField = DecimalField;
        //End Float Value

        var originalFilterTemplate = jsGrid.fields.text.prototype.filterTemplate;
        jsGrid.fields.text.prototype.filterTemplate = function () {
            var grid = this._grid;
            var $result = originalFilterTemplate.call(this);
            $result.on("keyup", function (e) {
                // TODO: add proper condition and optionally throttling to avoid too much requests
                grid.search();
            });
            return $result;
        }
        var usertype = $("#Id").val();
        if (usertype == 1) {  //jsGridManager
            $("#jsGrid").jsGrid({
                width: "100%",

                filtering: true,
                editing: true,
                sorting: true,
                paging: true,
                autoload: true,
                async: false,

                pageSize: 13,
                pageButtonCount: 5,
                onInit: function () {

                    $.ajax({

                        url: "../LeadPools/LeadLoadData",
                        dataType: "JSON",
                        async: false,
                        success: function (data) {
                            $("#jsGrid").jsGrid("option", "fields", [
                                { name: "id", title: "id", type: "text", visible: false },
                                { name: "LeadName", title: "Lead Name", type: "text", width: 100, validate: "required", editing: false },
                                { name: "Date", title: "Date", type: "date", width: 60, editing: false },
                                { name: "LeadRemarks", title: "Remarks", type: "text", width: 150, validate: "required", editing: false },
                                { name: "CreatedBy", title: "Created By", type: "text", width: 50, validate: "required", editing: false },
                                { name: "Salesmen", title: "Salesmen", type: "select", items: data, valueField: "Id", textField: "Name", width: 100, validate: "required" },
                                {
                                    name: 'View',
                                    itemTemplate: function (_, item) {
                                        return "<a onclick ='ReditectToViewSection(" + item.Id + ")' name='View'>View</a>";
                                    }, width: 30
                                },
                                { type: "control", deleteButton: false }
                            ]);

                        }
                    })

                },
                controller: {

                    loadData: function (filter) {
                        var d = $.Deferred();
                        $.ajax({
                            type: "GET",
                            async: false,
                            url: "../LeadPools/LeadListingLoad",
                            dataType: "JSON"
                        }).done(function (result) {
                            for (var prop in filter) {

                                if (filter[prop].length > 0) {
                                    result = $.grep(result, function (item) {
                                        var regexp = new RegExp(filter[prop], 'gi');
                                        if (item[prop].match(regexp)) {
                                            return item;
                                        }

                                    });
                                    break;
                                }
                                if (prop == "Salesmen" && filter['Salesmen'] != -1) {
                                    result = $.grep(result, function (item) {
                                        if (item[prop] == filter[prop]) {
                                            return item;
                                        }
                                    });
                                    break;
                                }

                            }
                            d.resolve(result);
                        });
                        return d.promise();
                    },
                    updateItem: function (item) {
                        $.ajax({
                            type: "GET",
                            async: false,
                            url: "../LeadPools/updateLeadPool",
                            data: item,
                            dataType: "JSON",
                            success: function (data) {
                                AlertPopUp(date);
                            }
                        });
                    }
                }

            });
        }
        if (usertype == 2) {  //jsGridSalesman
            $("#jsGrid").jsGrid({
                width: "100%",
                filtering: true,
                sorting: true,
                paging: true,
                autoload: true,
                pageSize: 13,
                pageButtonCount: 5,
                controller: {

                    loadData: function (filter) {
                        //$("#jsGrid").jsGrid("option", "filtering", false);
                        var d = $.Deferred();
                        $.ajax({
                            type: "GET",
                            async: false,
                            url: "../LeadPools/LeadListingLoad",
                            dataType: "JSON"
                        }).done(function (result) {
                            for (var prop in filter) {

                                if (filter[prop].length > 0) {
                                    result = $.grep(result, function (item) {
                                        var regexp = new RegExp(filter[prop], 'gi');
                                        if (item[prop].match(regexp)) {
                                            return item;
                                        }
                                    });
                                    break;
                                }

                            }
                            d.resolve(result);
                        });
                        return d.promise();
                    }
                },
                fields: [
                    { name: "Id", title: "Id", type: "text", visible: false },
                    { name: "LeadName", title: "Lead Name", type: "text", width: 50, validate: "required", editing: false },
                    { name: "Date", title: "Date", type: "date", width: 50, editing: false },
                    { name: "LeadRemarks", title: "Remarks", type: "text", width: 120, validate: "required", editing: false },
                    { name: "CreatedBy", title: "Created By", type: "text", width: 50, validate: "required", editing: false },
                    { name: "AssignedBy", title: "Assigned By", type: "text", width: 50, validate: "required", editing: false },
                    {
                        name: 'Update',

                        itemTemplate: function (_, item) {
                            return "<a onclick ='ReditectToUpdateSection(" + item.Id + ")' name='Update'>Update</a>";
                        }, width: 10
                    },
                    {
                        type: 'control',
                        headerTemplate: function () {
                            return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, false);
                        },
                        name: 'View',

                        itemTemplate: function (_, item) {
                            return "<a onclick ='ReditectToViewSection(" + item.Id + ")' name='View'>View</a>";
                        }, width: 10
                    }

                ]

            });
        }
        if (usertype == 3) { //JsOperator

            $("#jsGrid").jsGrid({
                width: "100%",
                //height: "400px",
                sorting: true,
                paging: true,
                autoload: true,
                filtering: true,
                pageSize: 13,
                pageButtonCount: 5,

                controller: {

                    loadData: function (filter) {
                        var d = $.Deferred();
                        $.ajax({
                            type: "GET",
                            async: false,
                            url: "../LeadPools/LeadListingLoad",
                            dataType: "JSON"
                        }).done(function (result) {
                            for (var prop in filter) {

                                if (filter[prop].length > 0) {
                                    result = $.grep(result, function (item) {
                                        var regexp = new RegExp(filter[prop], 'gi');
                                        if (item[prop].match(regexp)) {
                                            return item;
                                        }
                                    });
                                    break;
                                }

                            }
                            d.resolve(result);
                        });
                        return d.promise();
                    }
                },
                fields: [
                    { name: "Id", title: "Id", type: "text", visible: false },
                    { name: "LeadName", title: "Lead Name", type: "text", width: 50, validate: "required" },
                    { name: "Date", title: "Lead Date", type: "date", width: 50 },
                    { name: "LeadRemarks", title: "Remarks", type: "text", width: 150, validate: "required" },
                    {
                        name: 'Edit',

                        itemTemplate: function (_, item) {
                            return "<a onclick ='ReditectToEditSection(" + item.Id + ")' name='Edit'>Edit</a>";
                        }, width: 10
                    },
                    {
                        type: 'control',
                        name: 'View',

                        itemTemplate: function (_, item) {
                            return "<a onclick ='ReditectToViewSection(" + item.Id + ")' name='View'>View</a>";
                        }, width: 10
                    }
                ]

            });
        }
        else if (usertype == 4) {
            $("#jsGrid").jsGrid({
                width: "100%",
                //height: "100%",
                filtering: true,
                sorting: true,
                paging: true,
                autoload: true,
                pageSize: 13,
                pageButtonCount: 5,
                controller: {

                    loadData: function (filter) {
                        //$("#jsGrid").jsGrid("option", "filtering", false);
                        var d = $.Deferred();
                        $.ajax({
                            type: "GET",
                            async: false,
                            url: "../LeadPools/LeadListingLoad",
                            dataType: "JSON"
                        }).done(function (result) {
                            for (var prop in filter) {

                                if (filter[prop].length > 0) {
                                    result = $.grep(result, function (item) {
                                        var regexp = new RegExp(filter[prop], 'gi');
                                        if (item[prop].match(regexp)) {
                                            return item;
                                        }
                                    });
                                    break;
                                }

                            }
                            d.resolve(result);
                        });
                        return d.promise();
                    }
                },
                fields: [
                    { name: "Id", title: "Id", type: "text", visible: false },
                    { name: "LeadName", title: "Lead Name", type: "text", width: 50, validate: "required", editing: false },
                    { name: "Date", title: "Date", type: "date", width: 50, editing: false },
                    { name: "LeadRemarks", title: "Remarks", type: "text", width: 120, validate: "required", editing: false },
                    { name: "CreatedBy", title: "Created By", type: "text", width: 50, validate: "required", editing: false },
                    { name: "AssignedBy", title: "Assigned By", type: "text", width: 50, validate: "required", editing: false },
                    {
                        type: 'control',
                        headerTemplate: function () {
                            return this._createOnOffSwitchButton("filtering", this.searchModeButtonClass, false);
                        },
                        name: 'View',

                        itemTemplate: function (_, item) {
                            return "<a onclick ='ReditectToViewSection(" + item.Id + ")' name='View'>View</a>";
                        }, width: 10
                    }

                ]

            });

        }
    });







</script>
<script>
    function renderMyGrid() {

        $("#jsGrid").jsGrid("render");
    }
    function ReditectToUpdateSection(id) {
        var base_url = window.location.origin;
        window.location = base_url + "/LeadPools/StatusUpdate?id=" + id;
    }
    function ReditectToViewSection(id) {
        var base_url = window.location.origin;
        window.location = base_url + "/LeadPools/ViewLead?id=" + id;
    }

    function ReditectToEditSection(id) {
        var base_url = window.location.origin;
        window.location = base_url + "/LeadPools/LeadUpdate?id=" + id;
    }

    $(function () {
        var MyDateField = function (config) {
            jsGrid.Field.call(this, config);
        };
    });
</script>