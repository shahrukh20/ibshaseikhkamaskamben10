  List<exportclass> listOfExport = new List<exportclass>();
            foreach (var item in prdIDs)
            {
                try
                {
                    exportclass ec = new exportclass();

                    int prdid = int.Parse(item);
                    var product = db.Product.FirstOrDefault(i => i.ProductId == prdid && i.MemberId == Memberid);
                    ec.SKU = product.SKU;
                    ec.ASIN = product.ASIN;
                    ec.AutoPOGeneration = product.AutoPOGeneration == true ? "true" : "false";
                    ec.Brand = product.Brand.Name;
                    ec.Category = product.MemberCategory.CategoryName;
                    ec.ConditionalNote = product.ConditionalNote;
                    ec.CostPrice = product.CostPrice;
                    ec.EAN = product.EAN;
                    ec.HandlingCost = product.HandlingCost;
                    ec.HasVariant = product.Has_Variant == true ? "true" : "false";
                    ec.ISBN = product.ISBN;
                    ec.IsBundle = product.IsBundle == true ? "true" : "false";
                    ec.IsProdPriceIncTax = product.IsProdPriceIncTax == true ? "true" : "false";
                    ec.IsProductTradeOnly = product.IsProdTradeOnly == true ? "true" : "false";
                    ec.IsSync = product.IsSync == true ? "true" : "false";
                    ec.IsSyncCompleted = product.IsSyncCompleted == true ? "true" : "false";
                    ec.Manufacturer = product.Manufacturer == null ? "" : product.Manufacturer.Name;
                    ec.MaximumOrderQuantity = product.MaximumOrderQuantity;
                    ec.MemberItemCondition = product.MemberItemCondition.Name;
                    ec.MinimumOrderQuantity = product.MinimumOrderQuantity;
                    ec.MinimumQuantityAutoPO = product.MinimumQuantityAutoPO;
                    ec.ModelNumber = product.ModelNumber;
                    ec.MPN = product.MPN;
                    ec.Name = product.Name;
                    ec.ProductDescription = product.ProductDescription;
                    ec.ProductOfferPrice = product.ProductOfferPrice;
                    ec.ProductTitle = product.ProductTitle;
                    ec.RRP = product.RRP;
                    ec.SellingPriceExcTax = product.SellingPriceExcTax;
                    ec.SellingPriceIncTax = product.SellingPriceIncTax;
                    ec.ShortDescription = product.ShortDescription;
                    ec.Status = product.Status == true ? "true" : "false";
                    ec.StorageCost = product.StorageCost;
                    ec.Summary1 = product.Summary1;
                    ec.Summary2 = product.Summary2;
                    ec.Summary3 = product.Summary3;
                    ec.Summary4 = product.Summary4;
                    ec.Summary5 = product.Summary5;
                    ec.Supplier = product.Supplier == null ? "" : product.Supplier.Name;
                    ec.Tax_Rate = product.Tax_Rate;
                    ec.UPC = product.UPC;
                    ec.AttributeName = new List<string>();
                    ec.Attributevalue = new List<string>();
                    ec.ProductImage = new List<string>();

                    var productattributes = db.ProductAttribute.Where(i => i.ProductId == prdid).ToList();

                    string values = "";
                    var attributesgroup = productattributes.GroupBy(i => i.AttributeId).ToList();
                    foreach (var attribute in attributesgroup.Select((value, i) => new { i, value }))
                    {

                        values = "";
                        attribute.value.ForEach(i => values += i.AttributeValue.Name + ",");
                        values = values.TrimEnd(',');
                        ec.AttributeName.Add(attribute.value.FirstOrDefault().Attributes.Name);
                        ec.Attributevalue.Add(values);
                        //products.Rows.Add("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", values, "", "", "", "", "", "", "", "");

                    }

                    var productimages = db.ProductImages.Where(i => i.ProductId == prdid && i.IsDeleted == false && i.Product.MemberId == Memberid).ToList();
                    foreach (var image in productimages)
                    {
                        Uri myuri = new Uri(System.Web.HttpContext.Current.Request.Url.AbsoluteUri);
                        string pathQuery = myuri.PathAndQuery;
                        string hostName = myuri.ToString().Replace(pathQuery, "");
                        var url = hostName + "/Images/" + cf.GetMemberId() + "/Products" + "/" + image.ImagePath;
                        ec.ProductImage.Add(url);
                    }

                    var ship = db.ProductShipping.FirstOrDefault(i => i.ProductId == prdid && i.IsDeleted == false);
                    if (ship != null)
                    {
                        ec.Depth = ship.Depth;
                        ec.Length = ship.Length;
                        if (ship.PackingType != null)
                            ec.PackingType = ship.PackingType.Name;
                        else
                            ec.PackingType = "0";
                        ec.Weight = ship.Weight;
                        if (ship.WeightUnit != null)
                            ec.WeightUnit = ship.WeightUnit.Name;
                        else
                            ec.WeightUnit = "0";
                        ec.Width = ship.Width;
                        if (ship.DimensionUnit != null)
                            ec.MeasurementScale = ship.DimensionUnit.Name;
                        else
                            ec.MeasurementScale = "0";
                    }

                    // var url = Server.MapPath(ConfigurationManager.AppSettings["Image.TempFolderName"] + cf.GetMemberId() + "/Products" + "/" + fimgid);
                    // products.Rows.Add(product.SKU, "", product.ProductTitle, product.Has_Variant == true ? "true" : "false", product.IsBundle == true ? "true" : "false", product.Name, product.ProductDescription, product.ShortDescription, product.Summary1, product.Summary2, product.Summary3, product.Summary4, product.Summary5, product.UPC, product.EAN, product.ISBN, product.ASIN, product.AutoPOGeneration, product.IsProdTradeOnly, product.IsProdPriceIncTax, product.SellingPriceIncTax, product.SellingPriceExcTax, product.CostPrice, product.HandlingCost, product.StorageCost, product.RRP, product.ProductOfferPrice, product.MinimumQuantityAutoPO, product.MinimumOrderQuantity, product.MaximumOrderQuantity, product.MemberItemCondition.Name, product.ConditionalNote, product.Manufacturer.Name, product.ModelNumber, product.Brand.Name, product.MemberCategory.CategoryName, product.MPN, product.Supplier.Name, product.Status, product.Tax_Rate, product.IsSync == true ? "true" : "false", product.IsSyncCompleted == true ? "true" : "false", productattributes[0].Attributes.Name, values, url, shipping.FirstOrDefault()?.WeightUnit.Name, shipping.FirstOrDefault()?.Weight, shipping.FirstOrDefault()?.DimensionUnit.Name, shipping.FirstOrDefault()?.Length, shipping.FirstOrDefault()?.Depth, shipping.FirstOrDefault()?.Width, shipping.FirstOrDefault()?.PackingType.Name);
                    // products.Rows.Add("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", values, "", "", "", "", "", "", "", "");
                    listOfExport.Add(ec);
                    if (product.Has_Variant)
                    {
                        var childs = db.Product.Where(i => i.ParentProductId == product.ProductId && i.IsDeleted == false && i.MemberId == Memberid).ToList();

                        foreach (var child in childs)
                        {
                            exportclass ecchild = new exportclass();

                            int prdidchild = child.ProductId;
                            ecchild.ParentSKU = product.SKU;
                            //var product = db.Product.FirstOrDefault(i => i.ProductId == prdid);
                            ecchild.SKU = child.SKU;
                            ecchild.ASIN = child.ASIN;
                            ecchild.AutoPOGeneration = child.AutoPOGeneration == true ? "true" : "false";
                            ecchild.Brand = child.Brand.Name;
                            ecchild.Category = child.MemberCategory.CategoryName;
                            ecchild.ConditionalNote = child.ConditionalNote;
                            ecchild.CostPrice = child.CostPrice;
                            ecchild.EAN = child.EAN;
                            ecchild.HandlingCost = child.HandlingCost;
                            ecchild.HasVariant = child.Has_Variant == true ? "true" : "false";
                            ecchild.ISBN = child.ISBN;
                            ecchild.IsBundle = child.IsBundle == true ? "true" : "false";
                            ecchild.IsProdPriceIncTax = child.IsProdPriceIncTax == true ? "true" : "false";
                            ecchild.IsProductTradeOnly = child.IsProdTradeOnly == true ? "true" : "false";
                            ecchild.IsSync = child.IsSync == true ? "true" : "false";
                            ecchild.IsSyncCompleted = child.IsSyncCompleted == true ? "true" : "false";
                            ecchild.Manufacturer = child.Manufacturer == null ? "" : child.Manufacturer.Name;
                            ecchild.MaximumOrderQuantity = child.MaximumOrderQuantity;
                            ecchild.MemberItemCondition = child.MemberItemCondition.Name;
                            ecchild.MinimumOrderQuantity = child.MinimumOrderQuantity;
                            ecchild.MinimumQuantityAutoPO = child.MinimumQuantityAutoPO;
                            ecchild.ModelNumber = child.ModelNumber;
                            ecchild.MPN = child.MPN;
                            ecchild.Name = child.Name;
                            ecchild.ProductDescription = child.ProductDescription;
                            ecchild.ProductOfferPrice = child.ProductOfferPrice;
                            ecchild.ProductTitle = child.ProductTitle;
                            ecchild.RRP = child.RRP;
                            ecchild.SellingPriceExcTax = child.SellingPriceExcTax;
                            ecchild.SellingPriceIncTax = child.SellingPriceIncTax;
                            ecchild.ShortDescription = child.ShortDescription;
                            ecchild.Status = child.Status == true ? "true" : "false";
                            ecchild.StorageCost = child.StorageCost;
                            ecchild.Summary1 = child.Summary1;
                            ecchild.Summary2 = child.Summary2;
                            ecchild.Summary3 = child.Summary3;
                            ecchild.Summary4 = child.Summary4;
                            ecchild.Summary5 = child.Summary5;
                            ecchild.Supplier = child.Supplier == null ? "" : child.Supplier.Name;
                            ecchild.Tax_Rate = child.Tax_Rate;
                            ecchild.UPC = child.UPC;
                            ecchild.AttributeName = new List<string>();
                            ecchild.Attributevalue = new List<string>();
                            ecchild.ProductImage = new List<string>();

                            var productattributeschild = db.ProductAttribute.Where(i => i.ProductId == prdidchild).ToList();

                            string valueschild = "";
                            var attributesgroupchild = productattributeschild.GroupBy(i => i.AttributeId).ToList();
                            foreach (var attribute in attributesgroupchild.Select((value, i) => new { i, value }))
                            {

                                valueschild = "";
                                attribute.value.ForEach(i => valueschild += i.AttributeValue.Name + ",");
                                valueschild = valueschild.TrimEnd(',');
                                ecchild.AttributeName.Add(attribute.value.FirstOrDefault().Attributes.Name);
                                ecchild.Attributevalue.Add(valueschild);
                                //products.Rows.Add("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", values, "", "", "", "", "", "", "", "");

                            }

                            var productimageschild = db.ProductImages.Where(i => i.ProductId == prdidchild && i.IsDeleted == false && i.Product.MemberId == Memberid).ToList();
                            foreach (var image in productimageschild)
                            {
                                Uri myuri = new Uri(System.Web.HttpContext.Current.Request.Url.AbsoluteUri);
                                string pathQuery = myuri.PathAndQuery;
                                string hostName = myuri.ToString().Replace(pathQuery, "");
                                var url = hostName + "/Images/" + cf.GetMemberId() + "/Products" + "/" + image.ImagePath;
                                //  var url = Server.MapPath(ConfigurationManager.AppSettings["Image.TempFolderName"] + cf.GetMemberId() + "/Products" + "/" + image.ImagePath);
                                ecchild.ProductImage.Add(url);
                            }



                            var shipchild = db.ProductShipping.FirstOrDefault(i => i.ProductId == prdidchild && i.IsDeleted == false);
                            if (shipchild != null)
                            {
                                ecchild.Depth = shipchild.Depth;
                                ecchild.Length = shipchild.Length;
                                if (shipchild.PackingType != null)
                                    ecchild.PackingType = shipchild.PackingType.Name;
                                else
                                    ecchild.PackingType = "0";
                                ecchild.Weight = shipchild.Weight;
                                if (shipchild.WeightUnit != null)
                                    ecchild.WeightUnit = shipchild.WeightUnit.Name;
                                else
                                    ecchild.WeightUnit = "0";
                                ecchild.Width = shipchild.Width;
                                if (shipchild.DimensionUnit != null)
                                    ecchild.MeasurementScale = shipchild.DimensionUnit.Name;
                                else
                                    ecchild.MeasurementScale = "0";
                            }

                            // var url = Server.MapPath(ConfigurationManager.AppSettings["Image.TempFolderName"] + cf.GetMemberId() + "/Products" + "/" + fimgid);
                            // products.Rows.Add(product.SKU, "", product.ProductTitle, product.Has_Variant == true ? "true" : "false", product.IsBundle == true ? "true" : "false", product.Name, product.ProductDescription, product.ShortDescription, product.Summary1, product.Summary2, product.Summary3, product.Summary4, product.Summary5, product.UPC, product.EAN, product.ISBN, product.ASIN, product.AutoPOGeneration, product.IsProdTradeOnly, product.IsProdPriceIncTax, product.SellingPriceIncTax, product.SellingPriceExcTax, product.CostPrice, product.HandlingCost, product.StorageCost, product.RRP, product.ProductOfferPrice, product.MinimumQuantityAutoPO, product.MinimumOrderQuantity, product.MaximumOrderQuantity, product.MemberItemCondition.Name, product.ConditionalNote, product.Manufacturer.Name, product.ModelNumber, product.Brand.Name, product.MemberCategory.CategoryName, product.MPN, product.Supplier.Name, product.Status, product.Tax_Rate, product.IsSync == true ? "true" : "false", product.IsSyncCompleted == true ? "true" : "false", productattributes[0].Attributes.Name, values, url, shipping.FirstOrDefault()?.WeightUnit.Name, shipping.FirstOrDefault()?.Weight, shipping.FirstOrDefault()?.DimensionUnit.Name, shipping.FirstOrDefault()?.Length, shipping.FirstOrDefault()?.Depth, shipping.FirstOrDefault()?.Width, shipping.FirstOrDefault()?.PackingType.Name);
                            // products.Rows.Add("", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", values, "", "", "", "", "", "", "", "");
                            listOfExport.Add(ecchild);
                        }

                    }
                }
                catch (Exception e)
                { }
            }
            try
            {
                FileInfo newFile = new FileInfo(@"C:\sample1.xlsx");

                using (var package = new OfficeOpenXml.ExcelPackage(newFile))
                {
                    //  var worksheet = package.Workbook.Worksheets.FirstOrDefault(x => x.Name == "Sheet1");
                    var worksheet = package.Workbook.Worksheets.Add("Sheet2");
                    worksheet.Row(1).Height = 20;

                    worksheet.TabColor = Color.Gold;
                    worksheet.DefaultRowHeight = 12;
                    worksheet.Row(1).Height = 20;
                    worksheet.Cells[1, 1].Value = "SKU";
                    worksheet.Cells[1, 2].Value = "Parent SKU";
                    worksheet.Cells[1, 3].Value = "ProductTitle";
                    worksheet.Cells[1, 4].Value = "Has Variant";
                    worksheet.Cells[1, 5].Value = "Is Bundle";
                    worksheet.Cells[1, 6].Value = "Name";
                    worksheet.Cells[1, 7].Value = "Product Description";
                    worksheet.Cells[1, 8].Value = "Short Description";
                    worksheet.Cells[1, 9].Value = "Summary1";
                    worksheet.Cells[1, 10].Value = "Summary2";
                    worksheet.Cells[1, 11].Value = "Summary3";
                    worksheet.Cells[1, 12].Value = "Summary4";
                    worksheet.Cells[1, 13].Value = "Summary5";
                    worksheet.Cells[1, 14].Value = "UPC";
                    worksheet.Cells[1, 15].Value = "EAN";
                    worksheet.Cells[1, 16].Value = "ISBN";
                    worksheet.Cells[1, 17].Value = "ASIN";
                    worksheet.Cells[1, 18].Value = "Auto PO Generation";
                    worksheet.Cells[1, 19].Value = "Is Product Trade Only";
                    worksheet.Cells[1, 20].Value = "Is Prod Price Inc Tax";
                    worksheet.Cells[1, 21].Value = "Selling Price Inc Tax";
                    worksheet.Cells[1, 22].Value = "Selling Price Exc Tax";
                    worksheet.Cells[1, 23].Value = "Cost Price";
                    worksheet.Cells[1, 24].Value = "Handling Cost";
                    worksheet.Cells[1, 25].Value = "Storage Cost";
                    worksheet.Cells[1, 26].Value = "RRP";
                    worksheet.Cells[1, 27].Value = "Product Offer Price";
                    worksheet.Cells[1, 28].Value = "Minimum Quantity Auto PO";
                    worksheet.Cells[1, 29].Value = "Minimum Order Quantity";
                    worksheet.Cells[1, 30].Value = "Maximum Order Quantity";
                    worksheet.Cells[1, 31].Value = "Member Item Condition";
                    worksheet.Cells[1, 32].Value = "Conditional Note";
                    worksheet.Cells[1, 33].Value = "Manufacturer";
                    worksheet.Cells[1, 34].Value = "Model Number";
                    worksheet.Cells[1, 35].Value = "Brand";
                    worksheet.Cells[1, 36].Value = "Category";
                    worksheet.Cells[1, 37].Value = "MPN";
                    worksheet.Cells[1, 38].Value = "Supllier";
                    worksheet.Cells[1, 39].Value = "Status";
                    worksheet.Cells[1, 40].Value = "Tax_Rate";
                    worksheet.Cells[1, 41].Value = "Is Sync";
                    worksheet.Cells[1, 42].Value = "Is Sync Completed";
                    worksheet.Cells[1, 43].Value = "Product Attributes";

                    worksheet.Cells[1, 44].Value = "Product Image 1";
                    worksheet.Cells[1, 45].Value = "Product Image 2";
                    worksheet.Cells[1, 46].Value = "Product Image 3";
                    worksheet.Cells[1, 47].Value = "Product Image 4";
                    worksheet.Cells[1, 48].Value = "Product Image 5";
                    worksheet.Cells[1, 49].Value = "Product Image 6";
                    worksheet.Cells[1, 50].Value = "Product Image 7";
                    worksheet.Cells[1, 51].Value = "Product Image 8";
                    worksheet.Cells[1, 52].Value = "Product Image 9";
                    worksheet.Cells[1, 53].Value = "Product Image 10";


                    //worksheet.Cells[1, 44].Value = "Product Image 1";
                    worksheet.Cells[1, 45 + 9].Value = "Weight Unit";
                    worksheet.Cells[1, 46 + 9].Value = "Weight";
                    worksheet.Cells[1, 47 + 9].Value = "Measurement Scale";
                    worksheet.Cells[1, 48 + 9].Value = "Length";
                    worksheet.Cells[1, 49 + 9].Value = "Depth";
                    worksheet.Cells[1, 50 + 9].Value = "Width";
                    worksheet.Cells[1, 51 + 9].Value = "Packing Type";


                    var rowCounter = 2;
                    worksheet.Cells["A1:BH1"].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells["A1:BH1"].Style.Fill.BackgroundColor.SetColor(Color.Gray);
                    foreach (var item in listOfExport)
                    {


                        string a = "A" + rowCounter + ":" + "AZ" + rowCounter;
                        if (rowCounter % 2 != 0)
                        {
                            worksheet.Cells[a].Style.Fill.PatternType = ExcelFillStyle.Solid;
                            worksheet.Cells[a].Style.Fill.BackgroundColor.SetColor(Color.LightGray);
                        }
                        worksheet.Cells[rowCounter, 1].Value = item.SKU;
                        worksheet.Cells[rowCounter, 2].Value = item.ParentSKU;
                        worksheet.Cells[rowCounter, 3].Value = item.ProductTitle;
                        worksheet.Cells[rowCounter, 4].Value = item.HasVariant;
                        worksheet.Cells[rowCounter, 5].Value = item.IsBundle;
                        worksheet.Cells[rowCounter, 6].Value = item.Name;
                        worksheet.Cells[rowCounter, 7].Value = item.ProductDescription;
                        worksheet.Cells[rowCounter, 8].Value = item.ShortDescription;
                        worksheet.Cells[rowCounter, 9].Value = item.Summary1;
                        worksheet.Cells[rowCounter, 10].Value = item.Summary2;

                        worksheet.Cells[rowCounter, 11].Value = item.Summary3;
                        worksheet.Cells[rowCounter, 12].Value = item.Summary4;
                        worksheet.Cells[rowCounter, 13].Value = item.Summary5;
                        worksheet.Cells[rowCounter, 14].Value = item.UPC;
                        worksheet.Cells[rowCounter, 15].Value = item.EAN;
                        worksheet.Cells[rowCounter, 16].Value = item.ISBN;
                        worksheet.Cells[rowCounter, 17].Value = item.ASIN;
                        worksheet.Cells[rowCounter, 18].Value = item.AutoPOGeneration;
                        worksheet.Cells[rowCounter, 19].Value = item.IsProductTradeOnly;
                        worksheet.Cells[rowCounter, 20].Value = item.IsProdPriceIncTax;
                        worksheet.Cells[rowCounter, 21].Value = item.SellingPriceIncTax;
                        worksheet.Cells[rowCounter, 22].Value = item.SellingPriceExcTax;
                        worksheet.Cells[rowCounter, 23].Value = item.CostPrice;
                        worksheet.Cells[rowCounter, 24].Value = item.HandlingCost;
                        worksheet.Cells[rowCounter, 25].Value = item.StorageCost;
                        worksheet.Cells[rowCounter, 26].Value = item.RRP;
                        worksheet.Cells[rowCounter, 27].Value = item.ProductOfferPrice;
                        worksheet.Cells[rowCounter, 28].Value = item.MinimumQuantityAutoPO;
                        worksheet.Cells[rowCounter, 29].Value = item.MinimumOrderQuantity;
                        worksheet.Cells[rowCounter, 30].Value = item.MaximumOrderQuantity;
                        worksheet.Cells[rowCounter, 31].Value = item.MemberItemCondition;
                        worksheet.Cells[rowCounter, 32].Value = item.ConditionalNote;
                        worksheet.Cells[rowCounter, 33].Value = item.Manufacturer;
                        worksheet.Cells[rowCounter, 34].Value = item.ModelNumber;
                        worksheet.Cells[rowCounter, 35].Value = item.Brand;
                        worksheet.Cells[rowCounter, 36].Value = item.Category;
                        worksheet.Cells[rowCounter, 37].Value = item.MPN;
                        worksheet.Cells[rowCounter, 38].Value = item.Supplier;
                        worksheet.Cells[rowCounter, 39].Value = item.Status;
                        worksheet.Cells[rowCounter, 40].Value = item.Tax_Rate;
                        worksheet.Cells[rowCounter, 41].Value = item.IsSync;
                        worksheet.Cells[rowCounter, 42].Value = item.IsSyncCompleted;
                        //worksheet.Cells[rowCounter, 43].Value = item.AttributeName.FirstOrDefault();
                        //worksheet.Cells[rowCounter, 44].Value = item.Attributevalue.FirstOrDefault();
                        //worksheet.Cells[rowCounter, 44].Value = item.ProductImage.FirstOrDefault();
                        worksheet.Cells[rowCounter, 45 + 9].Value = item.WeightUnit;
                        worksheet.Cells[rowCounter, 46 + 9].Value = item.Weight;
                        worksheet.Cells[rowCounter, 47 + 9].Value = item.MeasurementScale;
                        worksheet.Cells[rowCounter, 48 + 9].Value = item.Length;
                        worksheet.Cells[rowCounter, 49 + 9].Value = item.Depth;
                        worksheet.Cells[rowCounter, 50 + 9].Value = item.Width;
                        worksheet.Cells[rowCounter, 51 + 9].Value = item.PackingType;

                        int count = item.Attributevalue.Count > item.ProductImage.Count ? item.Attributevalue.Count : item.ProductImage.Count;
                        string path = "";
                        string productattirbute = "";

                        for (int i = 1; i <= count; i++)
                        {

                            if (i <= item.Attributevalue.Count)
                            {
                                productattirbute += item.AttributeName[i - 1] + "|" + item.Attributevalue[i - 1] + ":";
                            }
                            if (i <= item.ProductImage.Count)
                            {
                                path = item.ProductImage[i - 1];
                                worksheet.Cells[rowCounter, 43 + i].Value = path;
                            }


                            //path = "";
                            //attributename = "";
                            //attributevalue = "";
                            //rowCounter++;
                        }
                        worksheet.Cells[rowCounter, 43].Value = productattirbute.TrimEnd(':');

                        // worksheet.Cells[rowCounter, 45].Value = path;
                        worksheet.Column(1).AutoFit();
                        worksheet.Column(2).AutoFit();

                        rowCounter++;
                    }

                    if (Type == "All")
                    {
                        //Guid guid = Guid.NewGuid();
                        //string path1 = @"C:\Documents\" + guid.ToString() + ".xlsx";
                        //Stream stream = System.IO.File.Create(path1);
                        //package.SaveAs(stream);
                        //stream.Close();




                        string slipname = string.Concat(
           Path.GetFileNameWithoutExtension("Document_"),
           DateTime.Now.ToString("yyyyMMddHHmmssfff")
           );
                        slipname += ".xlsx";
                        string tempFolderName = Server.MapPath(ConfigurationManager.AppSettings["Excel.TempFolderName"] + cf.GetMemberId() + "\\");

                        if (!Directory.Exists(Server.MapPath(ConfigurationManager.AppSettings["Excel.TempFolderName"] + cf.GetMemberId() + "\\")))
                            Directory.CreateDirectory(Server.MapPath(ConfigurationManager.AppSettings["Excel.TempFolderName"] + cf.GetMemberId() + "\\"));
                        var testFile = Path.Combine(tempFolderName, slipname);
                        byte[] bytes = package.GetAsByteArray();
                        System.IO.File.WriteAllBytes(testFile, bytes);
                        Stream stream = new MemoryStream(bytes);

                        Uri myuri = new Uri(System.Web.HttpContext.Current.Request.Url.AbsoluteUri);
                        string pathQuery = myuri.PathAndQuery;
                        string hostName = myuri.ToString().Replace(pathQuery, "");
                        string ABC = ConfigurationManager.AppSettings["Excel.TempFolderName"] + cf.GetMemberId() + "\\";
                        string filepath = hostName + ABC + slipname;
                        NotificationManager nm = new NotificationManager();
                        nm.PushNotification(cf.GetMemberId(), "Your all products are exported to excel. To Download <a target='_blank' href='" + filepath + "'>Click Here</a>");

                    }
                    else
                    //package.Workbook.Properties.Title = "Attempts";
                    {
                        this.Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                        this.Response.AddHeader(
                                  "content-disposition",
                                  string.Format("attachment;  filename={0}", "sample.xlsx"));
                        this.Response.BinaryWrite(package.GetAsByteArray());
                    }
                }
            }
            catch (Exception e)
            {

            }