@model CustomerManagementSystem.BLL.ViewModels.ReportsViewModel.UnAssignedReportsViewModel

@{
    /**/
}


<form action="/Reports/DealReport" id="leadconversionform" method="post">
    <div id="content">
        <div id="content">
            <h1>Deal Report</h1>
            <div class="box box-danger">
                <div class="box-header with-border">
                    <div class="form-horizontal">
                        <hr />
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div class="form-group">
                            @Html.LabelFor(model => model.ManagerId, htmlAttributes: new { @class = "col-md-2" })
                            <div class="col-md-4">
                                <select class="form-control select No-Validate" id="ManagerId" name="ManagerId">
                                    <option value="">Select Manager</option>
                                    @{
                                        foreach (var item in (IEnumerable<SelectListItem>)ViewBag.Manager)
                                        {
                                            if (item.Selected)
                                            {
                                                <option value="@item.Value" selected>@item.Text</option>}
                                            else
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                    }
                                </select>
                                @*@Html.EditorFor(model => model.ManagerId, new { htmlAttributes = new { @class = "form-control" } })*@
                                @Html.ValidationMessageFor(model => model.ManagerId, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.Label("Deal Age", htmlAttributes: new { @class = "col-md-2" })
                            <div class="col-md-4">
                                <select class="form-control select No-Validate" id="DealAge" name="DealAge">
                                    <option value="">Select Deal Age</option>
                                    <option value="30">> 30</option>
                                    <option value="60">> 60</option>
                                    <option value="90">> 90</option>
                                    <option value="100">> 100</option>
                                </select>
                                @*@Html.EditorFor(model => model.ManagerId, new { htmlAttributes = new { @class = "form-control" } })*@
                                @Html.ValidationMessageFor(model => model.ManagerId, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group">
                            @Html.Label("Employee", htmlAttributes: new { @class = "col-md-2" })
                            <div class="col-md-4">
                                <select class="form-control select No-Validate" id="Employee" name="Employee">
                                    <option value="">Select Employee</option>
                                    @{
                                        foreach (var item in (IEnumerable<SelectListItem>)ViewBag.Operator)
                                        {
                                            if (item.Selected)
                                            {
                                                <option value="@item.Value" selected>@item.Text</option>}
                                            else
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                    }
                                </select>
                                @*@Html.EditorFor(model => model.SalemanId, new { htmlAttributes = new { @class = "form-control" } })*@
                                @* @Html.ValidationMessageFor(model => model.SalemanId, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Action Type", htmlAttributes: new { @class = "col-md-2" })
                            <div class="col-md-4">

                                <select class="form-control select No-Validate" id="ActionType" name="ActionType">
                                    <option value="">Select Action Type</option>
                                    @{
                                        foreach (var item in (IEnumerable<SelectListItem>)ViewBag.ActionType)
                                        {
                                            if (item.Selected)
                                            {
                                                <option value="@item.Value" selected>@item.Text</option>}
                                            else
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                    }
                                </select>
                                @*@Html.EditorFor(model => model.SalemanId, new { htmlAttributes = new { @class = "form-control" } })*@
                                @* @Html.ValidationMessageFor(model => model.SalemanId, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label("Status", htmlAttributes: new { @class = "col-md-2" })
                            <div class="col-md-4">

                                <select class="form-control select No-Validate" id="Status" name="Status">
                                    <option value="">Select Status</option>

                                    @{
                                        foreach (var item in (IEnumerable<SelectListItem>)ViewBag.Status)
                                        {
                                            if (item.Selected)
                                            {
                                                <option value="@item.Value" selected>@item.Text</option>}
                                            else
                                            {
                                                <option value="@item.Value">@item.Text</option>
                                            }
                                        }
                                    }
                                </select>
                                @*@Html.EditorFor(model => model.SalemanId, new { htmlAttributes = new { @class = "form-control" } })*@
                                @* @Html.ValidationMessageFor(model => model.SalemanId, "", new { @class = "text-danger" })*@
                            </div>
                        </div>
                        @*<div class="form-group">
                        @Html.Label("Status", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("Status", (IEnumerable<SelectListItem>)ViewBag.Status, new { @class = "form-control select", @required = "required" })


                        </div>
                    </div>*@
                        <div class="form-group">


                            <div class="col-md-2"><label>Date From</label></div>
                            <div class="col-md-4">
                                <input type="date" class="form-control" id="fromdate" name="fromdate" />
                            </div>


                            <div class=" col-md-2"><label>Date to</label></div>
                            <div class="col-md-4">
                                <input type="date" class="form-control" id="todate" name="todate" />
                            </div>

                        </div>

                    </div>


                    <div class="form-group">
                        <div class="col-md-offset-10 col-md-2">
                            <input type="submit" value="Generate" class="btn btn-primary btn-block btn-flat" />

                        </div>
                    </div>




                </div>
            </div>
            <div class="box-header with-border">
                <div class="">
                    <div id="jsGrid"></div>
                </div>
            </div>
        </div>
        </div>
    </div>
</form>

<script type="text/javascript">



    $(document).ready(function () {
        var MyDateField = function (config) {
            jsGrid.Field.call(this, config);
        };

        MyDateField.prototype = new jsGrid.Field({

            css: "date-field",            // redefine general property 'css'
            align: "center",              // redefine general property 'align'

            myCustomProperty: "foo",      // custom property

            sorter: function (date1, date2) {
                return new Date(date1) - new Date(date2);
            },

            itemTemplate: function (value) {

                return new Date(value).toDateString();
            },

            filterTemplate: function (value) {
                return this._insertPicker = $("<input>").datepicker({ defaultDate: new Date() });
            },

            insertTemplate: function (value) {
                if (this.inserting)
                    return this._insertPicker = $("<input>").datepicker({ defaultDate: new Date() });
            },

            editTemplate: function (value) {
                if (this.inserting)
                    return this._editPicker = $("<input>").datepicker().datepicker("setDate", new Date(value));
            },

            insertValue: function () {
                if (this.inserting)
                    return this._insertPicker.datepicker("getDate").toISOString();
            },

            editValue: function () {
                if (this.inserting)
                    return this._editPicker.datepicker("getDate").toISOString();

            }
        });

        jsGrid.fields.date = MyDateField;

        //Float Value
        function DecimalField(config) {
            jsGrid.fields.number.call(this, config);
        }

        DecimalField.prototype = new jsGrid.fields.number({

            filterValue: function () {
                return this.filterControl.val()
                    ? parseFloat(this.filterControl.val() || 0, 10)
                    : undefined;
            },

            insertValue: function () {
                return this.insertControl.val()
                    ? parseFloat(this.insertControl.val() || 0, 10)
                    : undefined;
            },

            editValue: function () {
                return this.editControl.val()
                    ? parseFloat(this.editControl.val() || 0, 10)
                    : undefined;
            }
        });

        jsGrid.fields.decimal = jsGrid.DecimalField = DecimalField;
        //End Float Value

        var originalFilterTemplate = jsGrid.fields.text.prototype.filterTemplate;
        jsGrid.fields.text.prototype.filterTemplate = function () {
            var grid = this._grid;
            var $result = originalFilterTemplate.call(this);
            $result.on("keyup", function (e) {
                // TODO: add proper condition and optionally throttling to avoid too much requests
                grid.search();
            });
            return $result;
        }

        $("#jsGrid").jsGrid({
            width: "100%",
            filtering: true,
            sorting: true,
            paging: true,
            autoload: true,
            async: false,

            pageSize: 10,
            pageButtonCount: 5,

            controller: {

                loadData: function (filter) {
                    var d = $.Deferred();
                    $.ajax({
                        type: "GET",
                        async: false,
                        url: "../Reports/getList",
                        dataType: "JSON"
                    }).done(function (result) {
                        debugger;
                        for (var prop in filter) {

                            if (filter[prop].length > 0) {
                                result = $.grep(result, function (item) {
                                    var regexp = new RegExp(filter[prop], 'gi');
                                    if (item[prop].match(regexp)) {
                                        return item;
                                    }
                                });
                                break;
                            }

                        }
                        d.resolve(result);
                    });
                    return d.promise();
                }
            },
            fields: [

                { name: "LeadNo", title: "Lead No", type: "text", width: 50, validate: "required", editing: false },
                { name: "OpenedBy", title: "Opened By", type: "text", width: 50, validate: "required", editing: false },
                { name: "OpenedDate", title: "Opened Date", type: "text", width: 50, validate: "required", editing: false },
                { name: "AssignedDate", title: "Assigned Date", type: "text", width: 50, validate: "required", editing: false },

                 { name: "ExpectedClosureDate", title: "Expected Closure Date", type: "text", width: 50, validate: "required", editing: false },
                { name: "Source_Name", title: "Source Name", type: "text", width: 50, validate: "required", editing: false },

                 { name: "Status", title: "Status", type: "text", width: 50, validate: "required", editing: false },
                { name: "ExpectedValue", title: "Expected Value", type: "text", width: 50, validate: "required", editing: false },
{ name: "PropertyName", title: "Property Name", type: "text", width: 50, validate: "required", editing: false },

                //{
                //    type:'control',
                //    name: 'Edit',
                //    align: 'center',
                //    itemTemplate: function (_, item) {
                //        return "<a onclick =\"ReditectToEditSection(" + item.CityId + ");\" name='Edit'><span class='elementID'><span class='fa fa-pencil'></span></span></a>&nbsp&nbsp&nbsp<a href=\"/Cities/Delete/" + item.CityId + "\"><span class='elementID'><span class='fa fa-times'></span></span></a>";
                //    },width:20
                //}
            ]

        });

    });

</script>
<script>
    function GenerateReport() {

            var str = $("#leadconversionform").serialize();
            $.ajax({
                type: "POST",
                url: "../Reports/LeadConversion",
                dataType: "JSON",
                data: { str: str },
                async: false,
                success: function (data) {
                    var base_url = window.location.origin;
                    window.open(base_url + '/WebForms/ReportViwer.aspx', '_blank');
                },
                error: function (dar) { }
            })
        }

</script>
